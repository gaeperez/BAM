package $1$.cells;

import static java.util.Objects.requireNonNull;
import $1$.common.SubcellularLocation;

/**
 * {@linkplain CellMembrane} represents a membrane of a simulated cell.
 *
 * @author Aitor Blanco Míguez
 * @author Gael Pérez Rodríguez
 * @see Cell
 */
public class CellMembrane {

	private SubcellularLocation subcellularLocation;
	private double 			    radius;
	private double 			    height;
	private String 			    color;

	private CellMembrane(final SubcellularLocation subcellularLocation,
						 final double              radius, 
						 final double              height, 
						 final String              color) {
		this.subcellularLocation = subcellularLocation;
		this.radius 			 = radius;
		this.height				 = height;
		this.color 				 = color;
	}
	
	/**
     * Constructs and returns a new instance of {@link CellMembrane}.
     * 
     * @param subcellularLocation The {@link SubcellularLocation} of the membrane. It cannot be null.
     * @param radius A {@link Double} with the radius of the membrane. It cannot be null.
     * @param height A {@link Double} with the height of the membrane. It cannot be null.
     * @param color A {@link String} with the color of the membrane. It cannot be null.
     * @return A new instance of CellMembrane.
     * @throws NullPointerException If any of the given arguments is
     *         {@code null}.
     * @see Cell
     * @see SubcellularLocation
     */
	public static CellMembrane cellMembrane(final SubcellularLocation subcellularLocation,
							  		        final double              radius, 
							  		        final double              height, 
							  		        final String              color) throws NullPointerException{
		return new CellMembrane(requireNonNull(subcellularLocation), requireNonNull(radius), requireNonNull(height), 
								requireNonNull(color));
	}

	/**
     * Returns the {@link SubcellularLocation} of the membrane.
     *
     * @return The subcellular location of the membrane.
     * @see SubcellularLocation
     */
	public SubcellularLocation getSubcellularLocation() {
		return subcellularLocation;
	}

	/**
     * Returns the color of the membrane as {@link String}.
     *
     * @return The color of the membrane.
     */
	public String getColor() {
		return color;
	}

	/**
     * Returns the radius of the membrane as {@link Double}.
     *
     * @return The radius of the membrane.
     */
	public double getRadius() {
		return radius;
	}

	/**
     * Returns the height of the membrane as {@link Double}.
     *
     * @return The height of the membrane.
     */
	public double getHeight() {
		return height;
	}

	/**
    * Changes the subcellular location of the membrane.
    *
    * @param subcellularLocation The {@link SubcellularLocation} of the membrane. It cannot be null.
    * @throws NullPointerException If a {@code null} subcellular location is received.
    * @see SubcellularLocation
    */
	public void setSubcellularLocation(final SubcellularLocation subcellularLocation) 
									   throws NullPointerException {
		this.subcellularLocation = requireNonNull(subcellularLocation);
	}

	/**
    * Changes the radius of the membrane.
    *
    * @param radius A {@link Double} with the radius of the membrane. It cannot be null.
    * @throws NullPointerException If a {@code null} radius is received.
    */
	public void setRadius(final double radius) throws NullPointerException {
		this.radius = requireNonNull(radius);
	}

	/**
    * Changes the height of the membrane.
    *
    * @param height A {@link Double} with the height of the membrane. It cannot be null.
    * @throws NullPointerException If a {@code null} height is received.
    */
	public void setHeight(final double height) throws NullPointerException {
		this.height = requireNonNull(height);
	}

	/**
    * Changes the color of the membrane.
    *
    * @param color A {@link String} with the color of the membrane. It cannot be null.
    * @throws NullPointerException If a {@code null} color is received.
    */
	public void setColor(final String color) throws NullPointerException {
		this.color = requireNonNull(color);
	}
}
