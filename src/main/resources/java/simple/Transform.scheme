package $1$.events;

import static java.util.Objects.requireNonNull;
import $1$.agents.molecules.Molecule;

/**
 * {@linkplain Transform} represents a simulated transform {@link Event}.
 *
 * @author Aitor Blanco Míguez
 * @author Gael Pérez Rodríguez
 * @see Event
 */
public class Transform extends Event{
	private String       output;
	private EventTrigger trigger;

	private Transform(final String       target, 
					  final String       output, 
					  final EventTrigger trigger) {
		super(target);
		this.output  = output;
		this.trigger = trigger;
	}
	
	/**
     * Constructs and returns a new instance of {@link Transform}.
     * 
     * @param target A {@link String} as the event target. It cannot be null.
     * @param output A {@link String} as the output of the transform. It cannot be null.
     * @param trigger The {@link EventTrigger}. It cannot be null.
     * @return A new instance of Transform.
     * @throws NullPointerException If any of the given arguments is {@code null}.
     * @see EventTrigger
     */	
	public static Transform transform(final String       target, 
									  final String       output, 
									  final EventTrigger trigger) throws NullPointerException {
		return new Transform(requireNonNull(target), requireNonNull(output), requireNonNull(trigger));
	}
	
	/**
     * Returns the event {@link Molecule} output.
     *
     * @return The event molecule output.
     * @see    Molecule
     */
	public String getOutput() {
		return output;
	}

	/** Changes the transform output.
    *
    * @param output A {@link String} as the transform output.
    * @throws NullPointerException If a {@code null} output is received.
    */
	public void setOutput(final String output) throws NullPointerException {
		this.output = requireNonNull(output);
	}
	
	/**
    * Returns the {@link EventTrigger}.
    *
    * @return The event trigger.
    * @see EventTrigger
    */
	public EventTrigger getTrigger() {
		return trigger;
	}
	
	/** Changes the event trigger.
   *
   * @param trigger The {@link EventTrigger}.
   * @throws NullPointerException If a {@code null} trigger is received.
   * @see EventTrigger
   */
	public void setTrigger(final EventTrigger trigger) throws NullPointerException {
		this.trigger = requireNonNull(trigger);
	}
}
