package $14$.general;

/**
 * {@linkplain GeneralConfiguration} represents the general configuration of the simulation.
 *
 * @author Aitor Blanco Míguez
 * @author Gael Pérez Rodríguez
 */
public class GeneralConfiguration {

	final private Integer  numberOfProccesorsCreation = $1$;
	final private Integer  numberOfProccesors 		  = $2$;
	final private Integer  totalTries 				  = $3$;
	final private String   dirOutput 				  = "$4$";
	final private String   fileOutput				  = "$5$";
	final private String   simulationName 			  = "$6$";
	final private String[] emailTo 					  = new String[]{$7$};
	final private boolean  activateGUI 				  = $8$;
	final private String   readFromCheckpoint 		  = "$9$";
	final private Integer  numberOfJobs 			  = $10$;
	final private Integer  numberOfSteps 			  = $11$;
	final private Integer  saveSimulationEvery 		  = $12$;
	final private Integer  writeResultsEvery 		  = $13$;

	private GeneralConfiguration() { }
	
	/**
     * Constructs and returns a new instance of {@link GeneralConfiguration}.
     *
     * @return A new instance of GeneralConfiguration.
     */
	public static GeneralConfiguration generalConfiguration(){
		return new GeneralConfiguration();
	}
	
	/**
     * Returns the number of processors used during agent creation as a {@link Integer}.
     *
     * @return The number of processors used during agent creation.
     */
	public Integer getProcCreation() {
		return numberOfProccesorsCreation;
	}

	/**
     * Returns the number of processors used during simulation as a {@link Integer}.
     *
     * @return The number of processors used during simulation.
     */
	public Integer getProcSim() {
		return numberOfProccesors;
	}

	/**
     * Returns the number of total tries of the simulation as a {@link Integer}.
     *
     * @return The number of total tries of the simulation.
     */
	public Integer getTotalTries() {
		return totalTries;
	}

	/**
	 * Returns if the UI is activated
	 * 
	 * @return {@code true} if the UI is activated, {@code false} otherwise
	 */
	public boolean isActivateGUI() {
		return activateGUI;
	}

	/**
     * Returns the checkpoint to load as a {@link String}.
     *
     * @return The checkpoint to load.
     */
	public String getReadFromCheckpoint() {
		return readFromCheckpoint;
	}

	/**
     * Returns the number of repetitions of the simulation as a {@link Integer}.
     *
     * @return The number of repetitions of the simulation.
     */
	public Integer getNumberOfJobs() {
		return numberOfJobs;
	}

	/**
     * Returns the number of steps for the simulation as a {@link Integer}.
     *
     * @return The number of steps for the simulation.
     */
	public Integer getNumberOfSteps() {
		return numberOfSteps;
	}

	/**
     * Returns the number of steps for autosave the data as a {@link Integer}.
     *
     * @return The number of steps for autosave the data.
     */
	public Integer getSaveSimEvery() {
		return saveSimulationEvery;
	}
	
	/**
     * Returns the number of steps for write results as a {@link Integer}.
     *
     * @return The number of steps for write results.
     */
	public Integer getWriteResultsEvery() {
		return writeResultsEvery;
	}

	/**
     * Returns the output folder as a {@link String}.
     *
     * @return The output folder.
     */
	public String getDirOutput() {
		return dirOutput;
	}

	/**
     * Returns the output filename as a {@link String}.
     *
     * @return The output filename.
     */
	public String getFileOutput() {
		return fileOutput;
	}

	/**
     * Returns the simulation name as a {@link String}.
     *
     * @return The simulation name.
     */
	public String getSimName() {
		return simulationName;
	}
	
	/**
     * Returns the email(s) of contact as an array of {@link String}.
     *
     * @return The email(s) of contact.
     */
	public String[] getEmailTo() {
		return emailTo;
	}
}